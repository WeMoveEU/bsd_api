<?php

class CRM_Speakcivi_Logic_Campaign {

  public $campaign = array();

  public $defaultCampaignTypeId = 0;

  public $defaultTemplateId = 0;

  public $fieldTemplateId = '';

  public $fieldLanguage = '';

  public $fieldSenderMail = '';

  public $fieldUrlCampaign = '';

  public $fieldUtmCampaign = '';

  public $fieldTwitterShareText = '';

  public $fieldSubjectNew = '';

  public $fieldSubjectCurrent = '';

  public $fieldMessageNew = '';

  public $fieldMessageCurrent = '';

  public $fieldLanguageFormUrl = '';

  public $fieldRedirectConfirm = '';

  public $fieldRedirectOptout = '';

  public $fieldConsentIds = '';

  public $from = '';

  /**
   * CRM_Speakcivi_Logic_Campaign constructor.
   *
   * @param int $campaignId Campaign id from CiviCRM, not external identifier
   */
  function __construct($campaignId = 0) {
    $this->fieldTemplateId = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_template_id');
    $this->fieldLanguage = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_language');
    $this->fieldSenderMail = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_sender_mail');
    $this->fieldUrlCampaign = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_url_campaign');
    $this->fieldUtmCampaign = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_utm_campaign');
    $this->fieldTwitterShareText = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_twitter_share_text');
    $this->fieldSubjectNew = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_subject_new');
    $this->fieldSubjectCurrent = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_subject_current');
    $this->fieldMessageNew = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_message_new');
    $this->fieldMessageCurrent = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_message_current');
    $this->fieldLanguageFormUrl = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_language_form_url');
    $this->fieldRedirectConfirm = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_redirect_confirm');
    $this->fieldRedirectOptout = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_redirect_optout');
    $this->fieldConsentIds = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_campaign_consent_ids');
    if ($campaignId > 0) {
      $cache = new CRM_WeAct_CampaignCache(Civi::cache(), NULL);
      $this->campaign = $cache->getCiviCampaign($campaignId);
    }
  }


  /**
   * Get message template id from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getTemplateId() {
    if (is_array($this->campaign) && array_key_exists($this->fieldTemplateId, $this->campaign)) {
      return (int)$this->campaign[$this->fieldTemplateId];
    }
    return 0;
  }


  /**
   * Get language from $customFields array generated by getCustomFields() method
   *
   * @return string
   */
  public function getLanguage() {
    if (is_array($this->campaign) && array_key_exists($this->fieldLanguage, $this->campaign)) {
      return $this->campaign[$this->fieldLanguage];
    }
    return '';
  }

  public function getSenderMail() {
    if (is_array($this->campaign) && array_key_exists($this->fieldSenderMail, $this->campaign)) {
      return $this->campaign[$this->fieldSenderMail];
    }
    return '';
  }

  /**
   * Get Url of campaign from $customFields array generated by getCustomFields() method
   */
  public function getUrlCampaign() {
    if (is_array($this->campaign) && array_key_exists($this->fieldUrlCampaign, $this->campaign)) {
      return $this->campaign[$this->fieldUrlCampaign];
    }
    return '';
  }

  /**
   * URL of the language conversion form
   */
  public function getLanguageFormUrl() {
    if (is_array($this->campaign) && array_key_exists($this->fieldLanguageFormUrl, $this->campaign)) {
      return $this->campaign[$this->fieldLanguageFormUrl];
    }
    return '';
  }

  public function getUtmCampaign() {
    if (is_array($this->campaign) && array_key_exists($this->fieldUtmCampaign, $this->campaign)) {
      return $this->campaign[$this->fieldUtmCampaign];
    }
    return '';
  }

  public function getTwitterShareText() {
    if (is_array($this->campaign) && array_key_exists($this->fieldTwitterShareText, $this->campaign)) {
      return $this->campaign[$this->fieldTwitterShareText];
    }
    return '';
  }

  public function getSubjectNew() {
    if (is_array($this->campaign) && array_key_exists($this->fieldSubjectNew, $this->campaign)) {
      return $this->campaign[$this->fieldSubjectNew];
    }
    return '';
  }

  public function getSubjectCurrent() {
    if (is_array($this->campaign) && array_key_exists($this->fieldSubjectCurrent, $this->campaign)) {
      return $this->campaign[$this->fieldSubjectCurrent];
    }
    return '';
  }

  public function getMessageNew() {
    if (is_array($this->campaign) && array_key_exists($this->fieldMessageNew, $this->campaign)) {
      return $this->campaign[$this->fieldMessageNew];
    }
    return '';
  }

  public function getMessageCurrent() {
    if (is_array($this->campaign) && array_key_exists($this->fieldMessageCurrent, $this->campaign)) {
      return $this->campaign[$this->fieldMessageCurrent];
    }
    return '';
  }


  /**
   * Get redirect confirm of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getRedirectConfirm() {
    if (is_array($this->campaign) && array_key_exists($this->fieldRedirectConfirm, $this->campaign)) {
      return $this->campaign[$this->fieldRedirectConfirm];
    }
    return '';
  }


  /**
   * Get redirect optout of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getRedirectOptout() {
    if (is_array($this->campaign) && array_key_exists($this->fieldRedirectOptout, $this->campaign)) {
      return $this->campaign[$this->fieldRedirectOptout];
    }
    return '';
  }

  /**
   * Get redirect optout of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getConsentIds() {
    $consentIds = NULL;
    if (is_array($this->campaign) && array_key_exists($this->fieldConsentIds, $this->campaign)) {
      $consentIds = $this->campaign[$this->fieldConsentIds];
    }
    if (!$consentIds || empty($consentIds)) {
      $version = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'gdpr_privacy_pack_version');
      $language = substr($this->getLanguage(), 0, 2);
      $consentIds = "$version-$language";
    }
    return $consentIds;
  }


  public function update_consent($partner) {
    $updated_fields = [];
    $locale = $this->getLanguage();
    $language = substr($locale, 0, 2);
    $consentId = "2.1.{$partner['slug']}-$language";
    $updateParams = [
      'id' => $this->campaign['id'],
      $this->fieldConsentIds => $consentId,
    ];
    $result = civicrm_api3('Campaign', 'create', $updateParams);
    if (!$result['is_error']) {
      $updated_fields[] = $this->fieldConsentIds;
    }

    $filename = dirname(__FILE__).'/../../../templates/CRM/Speakcivi/Page/Partner/ConfirmationBlock.'.$locale.'.html.tpl';
    $default = dirname(__FILE__).'/../../../templates/CRM/Speakcivi/Page/Partner/ConfirmationBlock.en_GB.html.tpl';
    $confBlock = CRM_WeAct_Dictionary::getMessageContent($filename, $default);
    $confBlock = str_replace('{$partner_name}', $partner['name'], $confBlock);
    $confBlock = str_replace('{$partner_privacy_url}', $partner['privacy_url'], $confBlock);

    $filename = dirname(__FILE__).'/../../../templates/CRM/Speakcivi/Page/Partner/PrivacyBlock.'.$locale.'.tpl';
    $default = dirname(__FILE__).'/../../../templates/CRM/Speakcivi/Page/Partner/PrivacyBlock.en_GB.tpl';
    $privacyBlock = CRM_WeAct_Dictionary::getMessageContent($filename, $default);

    $msg = CRM_WeAct_Dictionary::getMessageNew($locale);
    $msg = str_replace("#CONFIRMATION_BLOCK", $confBlock, $msg);
    $msg = str_replace("#PRIVACY_BLOCK", $privacyBlock, $msg);
    $this->setCustomFieldBySQL($this->campaign['id'], $this->fieldMessageNew, $msg);
    $updated_fields[] = $this->fieldMessageNew;

    return $updated_fields;
  }


  /**
   * Set new value of custom field by using SQL query
   *
   * @param int $campaignId
   * @param string $customField For example $this->fieldMessageNew
   * @param mixed $value
   *
   * @throws \CiviCRM_API3_Exception
   */
  public function setCustomFieldBySQL($campaignId, $customField, $value) {
    $query = "SELECT cg.table_name, cf.column_name
              FROM civicrm_custom_group cg
              JOIN civicrm_custom_field cf ON cg.id = cf.custom_group_id
              WHERE cg.extends = 'Campaign' AND CONCAT('custom_', cf.id) = %1";
    $params = array(
      1 => array($customField, 'String'),
    );
    $results = CRM_Core_DAO::executeQuery($query, $params);
    if ($results->fetch()) {
      if ($results->table_name && $results->column_name) {
        $query = "UPDATE $results->table_name
                  SET $results->column_name = '".addslashes($value)."'
                  WHERE entity_id = %1";
        $params = array(
          1 => array($campaignId, 'Integer'),
        );
        CRM_Core_DAO::executeQuery($query, $params);
      }
    }
  }


  /**
   * Determine domain of speakout by parsing param. If false, returns default.
   * @param $param
   *
   * @return mixed|string
   */
  public function determineSpeakoutDomain($action_technical_type) {
    if ($action_technical_type) {
      $domain = explode(":", $action_technical_type);
      return $domain[0];
    }
    return CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'url_speakout');
  }

  /**
   * Determine whether $campaign table has a valid structure.
   *
   * @param $campaign
   *
   * @return bool
   */
  public function isValidCampaign($campaign) {
    if (
      is_array($campaign) &&
      array_key_exists('id', $campaign) &&
      $campaign['id'] > 0
    ) {
      return true;
    }
    return false;
  }


  /**
   * Check if given campaign is YouMove campaign
   *
   *
   * @return bool
   */
  public function isYoumove() {
    $eid = CRM_Utils_Array::value('external_identifier', $this->campaign, NULL);
    return $eid >= 10000;
  }
}
