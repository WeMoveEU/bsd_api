<?php

class CRM_Speakcivi_Logic_Campaign {

  public $campaign = array();

  public $defaultCampaignTypeId = 0;

  public $defaultTemplateId = 0;

  public $fieldTemplateId = '';

  public $fieldLanguage = '';

  public $fieldSenderMail = '';

  public $fieldUrlCampaign = '';

  public $fieldUtmCampaign = '';

  public $fieldTwitterShareText = '';

  public $fieldSubjectNew = '';

  public $fieldSubjectCurrent = '';

  public $fieldMessageNew = '';

  public $fieldMessageCurrent = '';

  public $fieldRedirectConfirm = '';

  public $fieldRedirectOptout = '';

  public $fieldConsentIds = '';

  public $from = '';

  /**
   * CRM_Speakcivi_Logic_Campaign constructor.
   *
   * @param int $campaignId Campaign id from CiviCRM, not external identifier
   */
  function __construct($campaignId = 0) {
    $this->fieldTemplateId = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_template_id');
    $this->fieldLanguage = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_language');
    $this->fieldSenderMail = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_sender_mail');
    $this->fieldUrlCampaign = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_url_campaign');
    $this->fieldUtmCampaign = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_utm_campaign');
    $this->fieldTwitterShareText = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_twitter_share_text');
    $this->fieldSubjectNew = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_subject_new');
    $this->fieldSubjectCurrent = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_subject_current');
    $this->fieldMessageNew = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_message_new');
    $this->fieldMessageCurrent = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_message_current');
    $this->fieldRedirectConfirm = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_redirect_confirm');
    $this->fieldRedirectOptout = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_redirect_optout');
    $this->fieldConsentIds = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_campaign_consent_ids');
    if ($campaignId > 0) {
      $this->campaign = CRM_Speakcivi_Logic_Cache_Campaign::getCampaignByLocalId($campaignId);
    }
  }


  /**
   * Get message template id from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getTemplateId() {
    if (is_array($this->campaign) && array_key_exists($this->fieldTemplateId, $this->campaign)) {
      return (int)$this->campaign[$this->fieldTemplateId];
    }
    return 0;
  }


  /**
   * Get language from $customFields array generated by getCustomFields() method
   *
   * @return string
   */
  public function getLanguage() {
    if (is_array($this->campaign) && array_key_exists($this->fieldLanguage, $this->campaign)) {
      return $this->campaign[$this->fieldLanguage];
    }
    return '';
  }


  /**
   * Get language from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getSenderMail() {
    if (is_array($this->campaign) && array_key_exists($this->fieldSenderMail, $this->campaign)) {
      return $this->campaign[$this->fieldSenderMail];
    }
    return '';
  }


  /**
   * Get Url of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getUrlCampaign() {
    if (is_array($this->campaign) && array_key_exists($this->fieldUrlCampaign, $this->campaign)) {
      return $this->campaign[$this->fieldUrlCampaign];
    }
    return '';
  }


  /**
   * Get Url of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getUtmCampaign() {
    if (is_array($this->campaign) && array_key_exists($this->fieldUtmCampaign, $this->campaign)) {
      return $this->campaign[$this->fieldUtmCampaign];
    }
    return '';
  }


  /**
   * Get Url of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getTwitterShareText() {
    if (is_array($this->campaign) && array_key_exists($this->fieldTwitterShareText, $this->campaign)) {
      return $this->campaign[$this->fieldTwitterShareText];
    }
    return '';
  }


  /**
   * Get Url of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getSubjectNew() {
    if (is_array($this->campaign) && array_key_exists($this->fieldSubjectNew, $this->campaign)) {
      return $this->campaign[$this->fieldSubjectNew];
    }
    return '';
  }


  /**
   * Get Url of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getSubjectCurrent() {
    if (is_array($this->campaign) && array_key_exists($this->fieldSubjectCurrent, $this->campaign)) {
      return $this->campaign[$this->fieldSubjectCurrent];
    }
    return '';
  }


  /**
   * Get Url of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getMessageNew() {
    if (is_array($this->campaign) && array_key_exists($this->fieldMessageNew, $this->campaign)) {
      return $this->campaign[$this->fieldMessageNew];
    }
    return '';
  }


  /**
   * Get Url of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getMessageCurrent() {
    if (is_array($this->campaign) && array_key_exists($this->fieldMessageCurrent, $this->campaign)) {
      return $this->campaign[$this->fieldMessageCurrent];
    }
    return '';
  }


  /**
   * Get redirect confirm of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getRedirectConfirm() {
    if (is_array($this->campaign) && array_key_exists($this->fieldRedirectConfirm, $this->campaign)) {
      return $this->campaign[$this->fieldRedirectConfirm];
    }
    return '';
  }


  /**
   * Get redirect optout of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getRedirectOptout() {
    if (is_array($this->campaign) && array_key_exists($this->fieldRedirectOptout, $this->campaign)) {
      return $this->campaign[$this->fieldRedirectOptout];
    }
    return '';
  }

  /**
   * Get redirect optout of campaign from $customFields array generated by getCustomFields() method
   *
   * @return int
   */
  public function getConsentIds() {
    if (is_array($this->campaign) && array_key_exists($this->fieldConsentIds, $this->campaign)) {
      return $this->campaign[$this->fieldConsentIds];
    }
    return '';
  }

  /**
   * Get campaign by external identifier.
   *
   * @param int $id External identifier (default) or local civicrm_campaign.id
   * @param boolean $useLocalId Use local id or external id (default)
   * @param bool $countActivities
   *
   * @return array
   */
  public function getCampaign($id, $useLocalId = false, $countActivities = true) {
    if ($id > 0) {
      if ($useLocalId) {
        $field = 'id';
      } else {
        $field = 'external_identifier';
      }
      $params = array(
        'sequential' => 1,
        $field => (int)$id,
      );
      if ($countActivities) {
        $params['api.Activity.getcount'] = array(
          'campaign_id' => '$value.id',
        );
      }
      $result = civicrm_api3('Campaign', 'get', $params);
      if ($result['count'] == 1) {
        return $result['values'][0];
      }
    }
    return array();
  }

  public function getRemoteCampaign($speakoutDomain, $externalIdentifier) {
    $url = "https://$speakoutDomain/api/v1/campaigns/$externalIdentifier";
    $user = CIVICRM_SPEAKOUT_USERS[$speakoutDomain];
    $auth = $user['email'] . ':' . $user['password'];
    return (object)json_decode($this->getContent($url, $auth));
  }


  /**
   * Set up new campaign in CiviCRM if this is necessary.
   * Call Speakout API at the given domain to get campaign metadata, and create the corresponding
   * campaign in CiviCRM. The function might indirectly recurse to create the parent campaign.
   *
   * TODO: re-work the check on existing campaign: the function should either not care about this
   *   or attempt a retrieve and check its validity.
   *   Asking for retrieved campaign and checking its validity does not prove anything.
   *
   * @param $externalIdentifier Speakout campaign id of the campaign to create
   * @param $campaign Potential existing campaign, to check if the creation is needed
   * @param $action_technical_type Speakout domain
   * @return array
   */
  public function setCampaign($externalIdentifier, $campaign, $action_technical_type) {
    if (!$this->isValidCampaign($campaign)) {
      if ($externalIdentifier > 0) {
        $speakoutDomain = $this->determineSpeakoutDomain($action_technical_type);
        $externalCampaign = $this->getRemoteCampaign($speakoutDomain, $externalIdentifier);
        if (is_object($externalCampaign) &&
          property_exists($externalCampaign, 'name') && $externalCampaign->name != '' &&
          property_exists($externalCampaign, 'id') && $externalCampaign->id > 0
        ) {
          $this->defaultCampaignTypeId = CRM_Core_PseudoConstant::getKey('CRM_Campaign_BAO_Campaign', 'campaign_type_id', 'Petitions');
          $locale = $externalCampaign->locale;
          $utmCampaign = ($externalCampaign->slug != '' ? $externalCampaign->slug : 'speakout_'.$externalCampaign->id);
          $consentIds = [];
          foreach ($externalCampaign->consents as $consent => $v) {
            $consentIds[] = $consent;
          }
          if ($externalCampaign->thankyou_from_email) {
            $sender = "\"$externalCampaign->thankyou_from_name\" &lt;$externalCampaign->thankyou_from_email&gt;";
          } else {
            $sender = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'from');
          }

          $params = array(
            'sequential' => 1,
            'name' => $externalCampaign->internal_name,
            'title' => $externalCampaign->internal_name,
            'description' => $externalCampaign->name,
            'external_identifier' => $externalCampaign->id,
            'campaign_type_id' => $this->defaultCampaignTypeId,
            'start_date' => date('Y-m-d H:i:s'),
            $this->fieldLanguage => $locale,
            $this->fieldSenderMail => $sender,
            $this->fieldUrlCampaign => "https://$speakoutDomain/campaigns/$utmCampaign",
            $this->fieldUtmCampaign => $utmCampaign,
            $this->fieldTwitterShareText => $externalCampaign->twitter_share_text,
            $this->fieldSubjectNew => CRM_Speakcivi_Tools_Dictionary::getSubjectConfirm($locale),
            $this->fieldSubjectCurrent => $externalCampaign->thankyou_subject,
            $this->fieldConsentIds => implode(',', $consentIds),
          );
          $result = civicrm_api3('Campaign', 'create', $params);
          if ($result['count'] == 1) {
            $this->setCustomFieldBySQL($result['id'], $this->fieldMessageNew, CRM_Speakcivi_Tools_Dictionary::getMessageNew($locale));
            $this->setCustomFieldBySQL($result['id'], $this->fieldMessageCurrent, $externalCampaign->thankyou_body);

            // This is done in a separate step even if the parent campaign is defined,
            // to avoid circular-reference drama (getCampaignByExternalId may call this function)
            if ($externalCampaign->parent_campaign_id) {
              $parent = CRM_Speakcivi_Logic_Cache_Campaign::getCampaignByExternalId($externalCampaign->parent_campaign_id, $action_technical_type);
              $parent_params = [
                'id' => $result['values'][0]['id'],
                'parent_id'=> $parent['id'],
              ];
            } else {
              $parent_params = [
                'id' => $result['values'][0]['id'],
                'parent_id'=> $result['values'][0]['id'],
              ];
            }
            civicrm_api3('Campaign', 'create', $parent_params);

            return $result['values'][0];
          }
        }
      }
      return array();
    } else {
      return $campaign;
    }
  }


  /**
   * Set new value of custom field
   *
   * @param int $campaignId
   * @param string $customField For example $this->fieldMessageNew
   * @param mixed $value
   *
   * @throws \CiviCRM_API3_Exception
   */
  public function setCustomField($campaignId, $customField, $value) {
    $params = array(
      'id' => $campaignId,
      'sequential' => 1,
      $customField => $value,
    );
    civicrm_api3('Campaign', 'create', $params);
  }


  /**
   * Set new value of custom field by using SQL query
   *
   * @param int $campaignId
   * @param string $customField For example $this->fieldMessageNew
   * @param mixed $value
   *
   * @throws \CiviCRM_API3_Exception
   */
  public function setCustomFieldBySQL($campaignId, $customField, $value) {
    $query = "SELECT cg.table_name, cf.column_name
              FROM civicrm_custom_group cg
              JOIN civicrm_custom_field cf ON cg.id = cf.custom_group_id
              WHERE cg.extends = 'Campaign' AND CONCAT('custom_', cf.id) = %1";
    $params = array(
      1 => array($customField, 'String'),
    );
    $results = CRM_Core_DAO::executeQuery($query, $params);
    if ($results->fetch()) {
      if ($results->table_name && $results->column_name) {
        $query = "UPDATE $results->table_name
                  SET $results->column_name = '".addslashes($value)."'
                  WHERE entity_id = %1";
        $params = array(
          1 => array($campaignId, 'Integer'),
        );
        CRM_Core_DAO::executeQuery($query, $params);
      }
    }
  }


  /**
   * Determine domain of speakout by parsing param. If false, returns default.
   * @param $param
   *
   * @return mixed|string
   */
  public function determineSpeakoutDomain($action_technical_type) {
    if ($action_technical_type) {
      $domain = explode(":", $action_technical_type);
      return $domain[0];
    }
    return CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'url_speakout');
  }


  /**
   * Determine whether $campaign table has a valid structure.
   *
   * @param $campaign
   *
   * @return bool
   */
  public function isValidCampaign($campaign) {
    if (
      is_array($campaign) &&
      array_key_exists('id', $campaign) &&
      $campaign['id'] > 0
    ) {
      return true;
    }
    return false;
  }


  /**
   * Get content of external file.
   *
   * @param string $url
   *
   * @return mixed
   * @throws \CRM_Speakcivi_Exception
   */
  public function getContent($url, $authString = NULL) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    if ($authString != NULL) {
      curl_setopt($ch, CURLOPT_USERPWD, $authString);
    }
    $data = curl_exec($ch);
    $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    if ($code == 200) {
      return $data;
    } elseif ($code = 404) {
      throw new CRM_Speakcivi_Exception('Speakout campaign doesnt exist: ' . $url, 1);
    } else {
      throw new CRM_Speakcivi_Exception('Speakout campaign is unavailable' . $url, 2);
    }
  }
}
