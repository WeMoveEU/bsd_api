<?php

class CRM_Speakcivi_Logic_Campaign {

	public $defaultLanguage = '';

	public $defaultCampaignTypeId = 0;

	public $defaultTemplateId = 0;

	public $fieldTemplateId = '';

	public $fieldLanguage = '';

	public $fieldSenderMail = '';

	public $from = '';

	public $urlSpeakout = '';

	public $customFields = array();

	public $countryLangMapping = array();

	function __construct($campaignId = 0) {
		$this->fieldTemplateId = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_template_id');
		$this->fieldLanguage = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_language');
		$this->fieldSenderMail = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'field_sender_mail');
		if ($campaignId > 0) {
			$this->customFields = $this->getCustomFields($campaignId);
		}
	}


	/**
	 * Get custom fields for campaign Id.
	 * Warning! Switch on permission "CiviCRM: access all custom data" for "ANONYMOUS USER"
	 * @param $campaignId
	 *
	 * @return array
	 * @throws CiviCRM_API3_Exception
	 */
	public function getCustomFields($campaignId) {
		$params = array(
			'sequential' => 1,
			'return' => "{$this->fieldTemplateId},{$this->fieldLanguage},{$this->fieldSenderMail}",
			'id' => $campaignId,
		);
		$result = civicrm_api3('Campaign', 'get', $params);
		if ($result['count'] == 1) {
			return $result['values'][0];
		} else {
			return array();
		}
	}


	/**
	 * Get message template id from $customFields array generated by getCustomFields() method
	 *
	 * @return int
	 */
	public function getTemplateId() {
		if (is_array($this->customFields) && array_key_exists($this->fieldTemplateId, $this->customFields)) {
			return (int)$this->customFields[$this->fieldTemplateId];
		}
		return 0;
	}


	/**
	 * Get language from $customFields array generated by getCustomFields() method
	 *
	 * @return string
	 */
	public function getLanguage() {
		if (is_array($this->customFields) && array_key_exists($this->fieldLanguage, $this->customFields)) {
			return $this->customFields[$this->fieldLanguage];
		}
		return '';
	}


	/**
	 * Get language from $customFields array generated by getCustomFields() method
	 *
	 * @return int
	 */
	public function getSenderMail() {
		if (is_array($this->customFields) && array_key_exists($this->fieldSenderMail, $this->customFields)) {
			return $this->customFields[$this->fieldSenderMail];
		}
		return '';
	}


	/**
	 * Get campaign by external identifier.
	 *
	 * @param $externalIdentifier
	 *
	 * @return array
	 * @throws CiviCRM_API3_Exception
	 */
	public function getCampaign($externalIdentifier) {
		if ($externalIdentifier > 0) {
			$params = array(
				'sequential' => 1,
				'external_identifier' => (int)$externalIdentifier,
			);
			$result = civicrm_api3('Campaign', 'get', $params);
			if ($result['count'] == 1) {
				return $result['values'][0];
			}
		}
		return array();
	}


	/**
	 * Setting up new campaign in CiviCRM if this is necessary.
	 *
	 * @param $externalIdentifier
	 * @param $campaign
	 *
	 * @return array
	 * @throws CiviCRM_API3_Exception
	 */
	public function setCampaign($externalIdentifier, $campaign) {
		if (!$this->isValidCampaign($campaign)) {
			if ($externalIdentifier > 0) {
				$this->urlSpeakout = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'url_speakout');
				$externalCampaign = (object)json_decode(@file_get_contents("https://".$this->urlSpeakout."/{$externalIdentifier}.json"));
				if (is_object($externalCampaign) &&
					property_exists($externalCampaign, 'name') && $externalCampaign->name != '' &&
					property_exists($externalCampaign, 'id') && $externalCampaign->id > 0
				) {
					$this->defaultCampaignTypeId = CRM_Core_OptionGroup::getValue('campaign_type', 'Petitions', 'name', 'String', 'value');
					$this->defaultTemplateId = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'default_template_id');
					$this->from = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'from');
					$params = array(
						'sequential' => 1,
						'title' => $externalCampaign->name,
						'external_identifier' => $externalCampaign->id,
						'campaign_type_id' => $this->defaultCampaignTypeId,
						'start_date' => date('Y-m-d H:i:s'),
						$this->fieldTemplateId => $this->defaultTemplateId,
						$this->fieldLanguage => $this->determineLanguage($externalCampaign->internal_name),
						$this->fieldSenderMail => $this->from,
					);
					$result = civicrm_api3('Campaign', 'create', $params);
					if ($result['count'] == 1) {
						return $result['values'][0];
					}
				}
			}
			return array();
		} else {
			return $campaign;
		}
	}


	/**
	 * Determine language based on campaign name which have to include country on the end, ex. *_EN.
	 *
	 * @param $campaignName
	 *
	 * @return string
	 */
	function determineLanguage($campaignName) {
		$re = "/(.*)[_\\- ]([a-zA-Z]{2})$/";
		if (preg_match($re, $campaignName, $matches)) {
			$country = strtoupper($matches[2]);
			$this->countryLangMapping = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'country_lang_mapping');
			if (array_key_exists($country, $this->countryLangMapping)) {
				return $this->countryLangMapping[$country];
			}
		}
		$this->defaultLanguage = CRM_Core_BAO_Setting::getItem('Speakcivi API Preferences', 'default_language');
		return $this->defaultLanguage;
	}


	/**
	 * Determine whether $campaign table has a valid structure.
	 *
	 * @param $campaign
	 *
	 * @return bool
	 */
	public function isValidCampaign($campaign) {
		if (
			is_array($campaign) &&
			array_key_exists('id', $campaign) &&
			$campaign['id'] > 0
		) {
			return true;
		}
		return false;
	}
}
